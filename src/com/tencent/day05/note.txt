第5天

面向对象

一、什么是面向对象
	面向对象抛弃了指针的概念，基于对象的编程，使得编程更符合人的逻辑思维
	简单、易学、扩展性强
	(*****)面向对象的特点：继承、封装、多态、抽象
	
二、类与对象
	1、什么是类(类别、分类)
		类是抽象的概念，是一组事物符合相同的特征的集合，可以认为是一个模板
		
	2、什么是对象
		世间万物皆对象，是客观事物真实存在的，看得见摸得着，对象是类的一个实例
		
		有对象一定有类，有类不一定有对象
		
	3、类的创建
	public class 类名{
		//类体
	}
	类名的要求:首字母大写，类名必须与文件名相同
	
	类体只能包含属性与方法
		属性相当于类中的特点，拥有的事物，比如:人类、名字、性别、身高、血型
		属性一般用变量表示
		
		方法相当于类中的动作与行为,比如：人类		说话、跑、吃饭、洗衣服
		
	4、对象的创建
	对象通过new关键字来创建，也就是说new关键字给对象分配内存空间
	
	类名	对象名=new	类名();		//对象就是java中的引用类型
	
	5、对象怎么访问类中的属性与方法
	对象名.属性名			访问属性
	对象名.方法名			访问方法
	
	对象没有被new关键字创建时，访问属性与方法会抛出空指针异常:
	java.lang.NullPointerException	//抛出异常

三、变量
	1、成员变量
	成员变量也叫全局变量、成员属性，定义在类中
	成员变量的访问范围，整个类中有效
	成员变量可以不赋予初始值，是默认有效的，如下：
		整数				0
		布尔				false
		浮点				0.0
		char			0
		String(引用类型)		null
	
	2、局部变量
	局部变量定义在方法中或者定义在逻辑控制语句中，
	如果定义在方法，变量的有效范围是整个方法
	如果定义在逻辑控制语句中，变量的有效范围是整个逻辑控制语句
	逻辑控制语句包含:if、 else if、 else、switch、while、 do..while、 for	
	局部变量一定要有初始值，没有赋初始值的变量是不可用的
	
	总结：一定要赋初始值
	作用范围:	方法、逻辑控制语句
	
	3、局部变量使用规则
	a、全局变量与局部变量可以重名
	      局部变量与局部变量不能重名
	b、方法中局部变量与全局变量重名，优先于局部变量
		通过this.全局变量名使用全局变量
	
四、方法
	方法是类中的行为或者具体的表现
	1、方法的定义
		访问修饰	返回值类型	方法(参数1,...,参数n){
			//方法体
		}
		
	注意事项:
	a、方法名必须按java的标识符的规定,首字母一定小写，多个单词使用驼峰命名
	方法名尽量使用动词
	b、当方法有返回值时，一定要用return关键字返回结果，返回值必须与方法定义时的类型一样
	c、调用方法时，参数列表的数据类型、参数个数、参数位置必须一一对应
	
	*****2、形参与实参
		形参:形式参数，抽象的，定义在方法上，用来接收方法调用时传递的参数
		
		实参:真实存在的数据，用来调用方法传递的参数
		
		实参传递给形参分两种情况
		a、基本数据类型		值传递
		b、引用类型			传递的是指针
			但是有一些引用类型传递的是值:
			Byte、Short、Integer、Long、Float、Double、Boolean、Character、String(基本数据类型的包装类)
			
		*****注：参数的传递或者变量的赋值都是把栈内存中的内容进行赋值
				栈内存存放基本数据类型的值与引用类型的指针
		
		1.java的基本数据类型是传值调用，对象引用类型是传引用。

		2.当传值调用时，改变的是形参的值，并没有改变实参的值，实参的值可以传递给形参，但是，这个传递是单向的，形参不能传递回实参。

		3.当引用调用时，如果参数是对象，无论对对象做了何种操作，都不会改变实参对象的引用，但是如果改变了对象的内容，就会改变实参对象的内容。
	
	
	作业：
	user类:
			用户名
			密码
			姓名
			login()方法
			
	product类:	
				商品类
				编号
				商品名称
				价格
	product[] p=new Product[5]
	
	Store商城类:
		User user=new User();
		Product[] p=new Product[5]
	
	shopping()方法
	
	
	
	
	
	
	